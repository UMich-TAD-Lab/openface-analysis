---
title: "OpenFaceReformat"
author: "Julianna Calabrese"
date: "12/12/2018"
output: html_document
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
#install.packages("mosaic") #Computation and modeling
#install.packages("ggplot2") #Graphic creation
#install.packages("tidyr") #Data tidying
#install.packages("dplyr") #Working with objects and dataframes
#install.packages("psych") #Basic analysis packages
#install.packages("plyr") #Tidyr's cousin
#install.packages("devtools") #Needed for other packages
#install.packages("nlme") #Non/linear mixed effects models
#install.packages("Hmisc") #Misc
#install.packages("pastecs) #Regularisation, decomposition and analysis of space-time series
#install.packages("reshape2") #Tidyr's tougher older brother
#install.packages("ggpubr") #ggplot2's visualization package
#install.packages("tinytex") #Needed to knit pdfs
#install.packages("latexpdf") #Needed to knit pdfs
#install.packages("rmarkdown") #Needed to knit pdfs
#install.packages("stargazer") #Makes nice tables
#install.packafes("mediation") #Mediation package
#install.packages("rockchalk") #Graphing simple slopes; moderation
#install.packages("multilevel") #Sobel Test
#install.packages("bda") #Sobel Test
#install.packages("gvlma") #Testing model assumptions
#install.packages("DescTools") #Misc basic functions to describe data
#install.packages("pROC") #Displays and analyzes ROC curves
#install.packages("lattice")
#install.packages("data.table")

library(mosaic)
library(ggplot2)
library(tidyr)
library(dplyr)
library(psych)
library(nlme)
library(plyr)
library(Hmisc)
library(devtools)
library(pastecs)
library(reshape2)
library(ggpubr)
library(tinytex)
library(latexpdf)
library(rmarkdown)
library(knitr)
library(stargazer)
library(mediation)
library(rockchalk)
library(multilevel)
library(bda)
library(gvlma)
library(DescTools)
library(pROC)
library(lattice)
library(data.table)
```

## Outline/Description

This is a very tricky file. You basically want to convert the wide cp_full into cp_long. Your dataset will need to be in a long format because you're going to do multilevel GCM. Here's some code from CSCAR to get you started. This file should be ran AFTER OpenFaceEmotion!

Most of this code was taken from old .rmd files called OpenFace_Making_df.rmd and OpenFace_Making_cleandf.rmd.

Make sure to add the new variables generated by OpenFaceEmotion to the first line under the chunk "## Making df". That's all you have to do get things to correspond. 

## Load in data

```{r}
#cp_joined <- read.csv(file="/Users/Julianna/Desktop/data/cp_joined.csv", header=TRUE, sep=",")
cp_joined <- read.csv(file="C:/Users/jrcala/Documents/My Research/RStudio/cp_joined.csv", header=TRUE, sep=",")
cp_joined$X <- NULL
```

## Is everything where it's supposed to be?

```{r, include=FALSE}
which( colnames(cp_joined)=="gender") #209
which( colnames(cp_joined)=="cort4bc") #199
which( colnames(cp_joined)=="cort12bc") #207
which( colnames(cp_joined)=="s4time") #154
which( colnames(cp_joined)=="s5time") #159
which( colnames(cp_joined)=="s6time") #164
which( colnames(cp_joined)=="s7time") #169
which( colnames(cp_joined)=="s8time") #174
which( colnames(cp_joined)=="s9time") #179
which( colnames(cp_joined)=="s10time") #184
which( colnames(cp_joined)=="s11time") #189
which( colnames(cp_joined)=="s12time") #194
which( colnames(cp_joined)=="pain") #42
which( colnames(cp_joined)=="anger") #43
which( colnames(cp_joined)=="fear") #44
which( colnames(cp_joined)=="happiness") #45
which( colnames(cp_joined)=="sadness") #46
which( colnames(cp_joined)=="CTQ_Total_Sum") #75
which( colnames(cp_joined)=="CTQ_SexAbuse_Mean") #82
which( colnames(cp_joined)=="Responder") #88
```

## Making df

```{r}
#olddf <- cp_joined[c(1,209,199:207,154,159,164,169,174,179,184,189,194,42:46,75:82,88)] 
df <- cp_joined[c("id","gender","cort4bc","cort5bc","cort6bc","cort7bc","cort8bc","cort9bc","cort10bc","cort11bc","cort12bc","s4time","s5time","s6time","s7time","s8time","s9time","s10time","s11time","s12time","Responder","pain","anger","fear","happiness","sadness","CTQ_Total_Sum","CTQ_Total_Mean","CTQ_EmoAbuse_Sum","CTQ_EmoAbuse_Mean","CTQ_PhyAbuse_Sum","CTQ_PhyAbuse_Mean","CTQ_SexAbuse_Sum","CTQ_SexAbuse_Mean")]
#This includes id, cortisol values, emotions, ctq, and time values

#olddf2 <- cp_joined[c(199:207)] 
df2 <- cp_joined[c("cort4bc","cort5bc","cort6bc","cort7bc","cort8bc","cort9bc","cort10bc","cort11bc","cort12bc")]
#This just includes (the Box-Cox-transformed) cortisol values

#olddf3 <- cp_joined[c(154,159,164,169,174,179,184,189,194)]
df3 <- cp_joined[c("s4time","s5time","s6time","s7time","s8time","s9time","s10time","s11time","s12time")]
#This just includes the time values associated with the corresponding cortisol values

df$peakname <- colnames(df2)[max.col(df2,ties.method="first")]
df$peaktime <- colnames(df3)[max.col(df2,ties.method="first")]
df$peaktimenum <- NA 
df$peaktimenum <- ifelse(df$peaktime == "s4time", df$s4time, 
    ifelse(df$peaktime == "s5time", df$s5time,
    ifelse(df$peaktime == "s6time", df$s6time,
    ifelse(df$peaktime == "s7time", df$s7time,
    ifelse(df$peaktime == "s8time", df$s8time,
    ifelse(df$peaktime == "s9time", df$s9time,
    ifelse(df$peaktime == "s10time", df$s10time,
    ifelse(df$peaktime == "s11time", df$s11time,
    ifelse(df$peaktime == "s12time", df$s12time,NA)))))))))
rm(df2)
rm(df3)
```

## Making dfgather

```{r }
dfgather <- gather(df, cortisol, cortvalue, cort4bc:cort12bc, factor_key=TRUE)

dfgather$stime <- 0
dfgather$stime[dfgather$cortisol == "cort4bc"] <- dfgather$s4time
dfgather$stime[dfgather$cortisol == "cort5bc"] <- dfgather$s5time
dfgather$stime[dfgather$cortisol == "cort6bc"] <- dfgather$s6time
dfgather$stime[dfgather$cortisol == "cort7bc"] <- dfgather$s7time
dfgather$stime[dfgather$cortisol == "cort8bc"] <- dfgather$s8time
dfgather$stime[dfgather$cortisol == "cort9bc"] <- dfgather$s9time
dfgather$stime[dfgather$cortisol == "cort10bc"] <- dfgather$s10time
dfgather$stime[dfgather$cortisol == "cort11bc"] <- dfgather$s11time
dfgather$stime[dfgather$cortisol == "cort12bc"] <- dfgather$s12time
```

```{r}
dfgather$timenum <- 0
dfgather$timenum[dfgather$cortisol == "cort4bc"] <- 4
dfgather$timenum[dfgather$cortisol == "cort5bc"] <- 5
dfgather$timenum[dfgather$cortisol == "cort6bc"] <- 6
dfgather$timenum[dfgather$cortisol == "cort7bc"] <- 7
dfgather$timenum[dfgather$cortisol == "cort8bc"] <- 8
dfgather$timenum[dfgather$cortisol == "cort9bc"] <- 9
dfgather$timenum[dfgather$cortisol == "cort10bc"] <- 10
dfgather$timenum[dfgather$cortisol == "cort11bc"] <- 11
dfgather$timenum[dfgather$cortisol == "cort12bc"] <- 12
```

```{r}
dfgather$s4time <- NULL
dfgather$s5time <- NULL
dfgather$s6time <- NULL
dfgather$s7time <- NULL
dfgather$s8time <- NULL
dfgather$s9time <- NULL
dfgather$s10time <- NULL
dfgather$s11time <- NULL
dfgather$s12time <- NULL
```

## Creating cp_long

```{r}
cp_long <- dfgather
rm(dfgather)
rm(df)
rm(cp_joined)
```

## Pre-Analysis Cleaning

```{r}
cp_long$ctqsum <- cp_long$CTQ_Total_Sum
cp_long$emosum <- cp_long$CTQ_EmoAbuse_Sum

cp_long$CTQ_Total_Sum <- NULL
cp_long$CTQ_Total_Mean <- NULL
cp_long$CTQ_EmoAbuse_Sum <- NULL
cp_long$CTQ_EmoAbuse_Mean <- NULL
cp_long$CTQ_PhyAbuse_Sum <- NULL
cp_long$CTQ_PhyAbuse_Mean <- NULL
cp_long$CTQ_SexAbuse_Sum <- NULL
cp_long$CTQ_SexAbuse_Mean <- NULL

cp_long$gender <- as.factor(cp_long$gender)
cp_long$id <- as.factor(cp_long$id)
cp_long$Responder <- as.factor(cp_long$Responder)
```

## Re-coding gender because of the patriarchy

```{r}
cp_long$gendernew <- ifelse(cp_long$gender == '1', 0, 1)
cp_long$genderold <- cp_long$gender
cp_long$gender <- cp_long$gendernew
cp_long$gendernew <- NULL
```

```{r}
cp_long$male <- ifelse(cp_long$gender == '0', 1, 0)
cp_long$male <- as.factor(cp_long$male)
cp_long$female <- ifelse(cp_long$gender == '1', 1, 0)
cp_long$female <- as.factor(cp_long$female)
```

```{r}
cp_long$gendercat <- ifelse(cp_long$gender == '0', "male", "female")
cp_long$gendercat <- as.factor(cp_long$gendercat)
```

## Centering

```{r}
hist(cp_long$pain, main = "Uncentered Pain",col='gray')
cp_long$painC <- scale(cp_long$pain)
hist(cp_long$painC, main = "Centered Pain",col=rainbow(8))

hist(cp_long$anger, main = "Uncentered Anger", col='gray')
cp_long$angerC <- scale(cp_long$anger)
hist(cp_long$angerC, main = "Centered Anger", col=rainbow(8))

hist(cp_long$fear, main = "Uncentered Fear", col='gray')
cp_long$fearC <- scale(cp_long$fear)
hist(cp_long$fear, main = "Centered Fear", col=rainbow(8))

hist(cp_long$happiness, main = "Uncentered Happiness", col = 'gray')
cp_long$happinessC <- scale(cp_long$happiness)
hist(cp_long$happinessC, main = "Centered Happiness", col = rainbow(8))

hist(cp_long$sadness, main = "Uncentered Sadness", col = 'gray')
cp_long$sadnessC <- scale(cp_long$sadness)
hist(cp_long$sadnessC, main = "Centered Sadness", col = rainbow(8))

hist(cp_long$peaktimenum, main = "Uncentered peaktimenum", col = 'gray')
cp_long$peaktimenumC <- scale(cp_long$peaktimenum)
hist(cp_long$peaktimenumC, main = "Centered peaktimenum", col = rainbow(8))

hist(cp_long$cortvalue, main = "Uncentered cortvalue", col = 'gray')
cp_long$cortvalueC <- scale(cp_long$cortvalue)
hist(cp_long$cortvalueC, main = "Centered cortvalue", col = rainbow(8))

hist(cp_long$stime, main = "Uncentered stime", col = 'gray')
cp_long$stimeC <- scale(cp_long$stime)
hist(cp_long$stimeC, main = "Centered stime", col = rainbow(8))

hist(cp_long$ctqsum, main = "Uncentered ctqsum", col = 'gray')
cp_long$ctqsumC <- scale(cp_long$ctqsum)
hist(cp_long$ctqsumC, main = "Centered ctqsum", col = rainbow(8))

hist(cp_long$emosum, main = "Uncentered emosum", col = 'gray')
cp_long$emosumC <- scale(cp_long$emosum)
hist(cp_long$emosumC, main = "Centered emosum", col = rainbow(8))

#This is timenum's version of centering
cp_long$timenumC <- 0
cp_long$timenumC[cp_long$timenum==4] <- 1
cp_long$timenumC[cp_long$timenum==5] <- 2
cp_long$timenumC[cp_long$timenum==6] <- 3
cp_long$timenumC[cp_long$timenum==7] <- 4
cp_long$timenumC[cp_long$timenum==8] <- 5
cp_long$timenumC[cp_long$timenum==9] <- 6
cp_long$timenumC[cp_long$timenum==10] <- 7
cp_long$timenumC[cp_long$timenum==11] <- 8
cp_long$timenumC[cp_long$timenum==12] <- 9

cp_long$timenum <- as.factor(cp_long$timenum)
cp_long$timenumC <- as.factor(cp_long$timenumC)
```

## Landmark Registration

### Creating variables: maxtime, timetopeak, timebeforepeak, timeafterpeak

```{r}
cp_long$maxtime <- 0
cp_long$maxtime <- ave(cp_long$stimeC, cp_long$id, FUN = max)
hist(cp_long$maxtime, main = "Histogram of maxtime", col=rainbow(8))
```

```{r}
cp_long$timetopeak <- 0
#peaktimenumC - stimeC = minutes from peak
#Multiplied by -1 so that times before peak are negative and times after peak are positive (for next step: creating TimeBeforePeak and TimeAfterPeak)
cp_long$timetopeak <- (cp_long$peaktimenumC - cp_long$stimeC) * -1
hist(cp_long$timetopeak, main = "Histogram of timetopeak", col=rainbow(8))
```

From Melissa's code:

* Creating TimeBeforePeak and TimeAfterPeak (reactivity and recovery times, respectively):
    + When Time2Pk is negative, TimeBeforePeak = minutes from peak at each sampling time
    + When Time2Pk is positive, TimeBeforePeak = 0
    + When Time2Pk is positive, TimeAfterPeak = minutes from peak at each sampling time
    + When Time2Pk is negative, TimeAfterPeak = 0

```{r}
#timebeforepeak aka the reactivity slope
cp_long$timebeforepeak <- 0
cp_long$timebeforepeak <- ifelse(cp_long$timetopeak < 0, cp_long$timetopeak, 0)
#If timetopeak < 0 (aka negative), then timebeforepeak = timetopeak
#If timetopeak > 0 (aka positive), then timebeforepeak = 0
hist(cp_long$timebeforepeak, main = "Histogram of timebeforepeak",col=rainbow(8))

#timeafterpeak aka the recovery slope
cp_long$timeafterpeak <- 0
cp_long$timeafterpeak <- ifelse(cp_long$timetopeak > 0, cp_long$timetopeak, 0)
#If timetopeak > 0 (aka positive), then timeafterpeak = timetopeak
#If timetopeak < 0 (aka negative), then timeafterpeak = 0
hist(cp_long$timeafterpeak, main = "Histogram of timeafterpeak",col=rainbow(8))
```

### Creating variables: maxgrouptime, timebeforegrouppeak, timeaftergrouppeak

```{r}
#Uhhhh... I'll do that later. I'm not 100% sure what I should use as the "group" anyway. 
#Maybe I don't even need to do this step. 
```


## Writing cp_long out into a .csv file

```{r}
#write.csv(cp_long, file="/Users/Julianna/Desktop/data/cp_long.csv")
write.csv(cp_long, file="C:/Users/jrcala/Documents/My Research/RStudio/cp_long.csv")

#cp_long has 1665 observations and 32 variables.
```
