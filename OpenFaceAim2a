---
title: "OpenFaceAim2a"
author: "Julianna Calabrese"
date: "12/12/2018"
output: html_document
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
#install.packages("mosaic")
#install.packages("ggplot2")
#install.packages("tidyr")
#install.packages("dplyr")
#install.packages("psych")
#install.packages("nlme")
#install.packages("plyr")
#install.packages("Hmisc")
#install.packages("rmarkdown")
#install.packages("shiny")
#install.packages("yaml")
#install.packages("rapportools")
#install.packages("lavaan")
#install.packages("lme4")
#install.packages("corrr")
#install.packages("corrplot")
#install.packages("reshape2")
#install.packages("lmerTest")

library(mosaic)
library(ggplot2)
library(tidyr)
library(dplyr)
library(psych)
library(nlme)
library(plyr)
library(Hmisc)
library(rmarkdown)
library(shiny)
library(yaml)
library(rapportools)
library(lavaan)
library(lme4)
library(corrr)
library(corrplot)
library(reshape2)
library(lmerTest)
```

### Outline/Description

This file will be where all the primary data analysis occurs. In previous rmd files, you'll need to convert all the stuff to a long format.

Then, you're going to run a model that looks like this...

mod1 <- lm(cortisol~time+time^2+sex+AU1+AU1*time+AU1*time*time^2)

...but it's not going to be a lm() model, it's going to be a multilevel growth curve model, so you'll probably need to use the lme4() package with the lmer() command or the nlme() package with the lme() command. This will produce a fixed effects table that represents the parameters of everything that you put in the above model to predict cortisol. Then you need to tell R what your random effects are, which is the intercept and time. 

Then you do something with landmark registration, but that's kind of already done, so you need to ask someone who ask access to that dataset to share it with you.

All the instructions can be found in Lopez-Duran 2014. Do NOT do anything involving AUC!

## Load in data and other logistics

```{r}
cp_long <- read.csv(file="C:/Users/jrcala/Documents/My Research/RStudio/cp_long.csv", header=TRUE, sep=",")
#cp_long <- read.csv(file="/Users/Julianna/Desktop/data/cp_long.csv", header=TRUE, sep=",")
cp_long$X <- NULL
```

## Pre-Analysis Cleaning

```{r}
cp_long$ctqsum <- cp_long$CTQ_Total_Sum
cp_long$emosum <- cp_long$CTQ_EmoAbuse_Sum

cp_long$CTQ_Total_Sum <- NULL
cp_long$CTQ_Total_Mean <- NULL
cp_long$CTQ_EmoAbuse_Sum <- NULL
cp_long$CTQ_EmoAbuse_Mean <- NULL
cp_long$CTQ_PhyAbuse_Sum <- NULL
cp_long$CTQ_PhyAbuse_Mean <- NULL
cp_long$CTQ_SexAbuse_Sum <- NULL
cp_long$CTQ_SexAbuse_Mean <- NULL

cp_long$gender <- as.factor(cp_long$gender)
cp_long$id <- as.factor(cp_long$id)
```

## Centering

```{r}
hist(cp_long$pain, main = "Uncentered Pain",col='gray')
cp_long$painC <- scale(cp_long$pain)
hist(cp_long$painC, main = "Centered Pain",col=rainbow(8))

hist(cp_long$anger, main = "Uncentered Anger", col='gray')
cp_long$angerC <- scale(cp_long$anger)
hist(cp_long$angerC, main = "Centered Anger", col=rainbow(8))

hist(cp_long$fear, main = "Uncentered Fear", col='gray')
cp_long$fearC <- scale(cp_long$fear)
hist(cp_long$fear, main = "Centered Fear", col=rainbow(8))

hist(cp_long$happiness, main = "Uncentered Happiness", col = 'gray')
cp_long$happinessC <- scale(cp_long$happiness)
hist(cp_long$happinessC, main = "Centered Happiness", col = rainbow(8))

hist(cp_long$sadness, main = "Uncentered Sadness", col = 'gray')
cp_long$sadnessC <- scale(cp_long$sadness)
hist(cp_long$sadnessC, main = "Centered Sadness", col = rainbow(8))

hist(cp_long$peaktimenum, main = "Uncentered peaktimenum", col = 'gray')
cp_long$peaktimenumC <- scale(cp_long$peaktimenum)
hist(cp_long$peaktimenumC, main = "Centered peaktimenum", col = rainbow(8))

hist(cp_long$cortvalue, main = "Uncentered cortvalue", col = 'gray')
cp_long$cortvalueC <- scale(cp_long$cortvalue)
hist(cp_long$cortvalueC, main = "Centered cortvalue", col = rainbow(8))

hist(cp_long$stime, main = "Uncentered stime", col = 'gray')
cp_long$stimeC <- scale(cp_long$stime)
hist(cp_long$stimeC, main = "Centered stime", col = rainbow(8))

hist(cp_long$ctqsum, main = "Uncentered ctqsum", col = 'gray')
cp_long$ctqsumC <- scale(cp_long$ctqsum)
hist(cp_long$ctqsumC, main = "Centered ctqsum", col = rainbow(8))

hist(cp_long$emosum, main = "Uncentered emosum", col = 'gray')
cp_long$emosumC <- scale(cp_long$emosum)
hist(cp_long$emosumC, main = "Centered emosum", col = rainbow(8))

#This is timenum's version of centering
cp_long$timenumC <- 0
cp_long$timenumC[cp_long$timenum==4] <- 1
cp_long$timenumC[cp_long$timenum==5] <- 2
cp_long$timenumC[cp_long$timenum==6] <- 3
cp_long$timenumC[cp_long$timenum==7] <- 4
cp_long$timenumC[cp_long$timenum==8] <- 5
cp_long$timenumC[cp_long$timenum==9] <- 6
cp_long$timenumC[cp_long$timenum==10] <- 7
cp_long$timenumC[cp_long$timenum==11] <- 8
cp_long$timenumC[cp_long$timenum==12] <- 9

cp_long$timenum <- as.factor(cp_long$timenum)
cp_long$timenumC <- as.factor(cp_long$timenumC)
```

## Replicating that plot from Lopez-Duran 2014

```{r}
test.plot <- aggregate( cortvalue ~ timenumC, cp_long, mean )

plot(test.plot, lwd=2, type="o", xlab="Time", ylab="Cortisol", main="Mean Cortisol Over Time")

ggplot(cp_long, aes(timenum, cortvalue, group=factor(id))) + geom_line(aes(color=factor(timenum))) + theme(legend.position = "none") + ggtitle("Cortisol Line Graph")

ggplot(cp_long, aes(timenum, cortvalue, group=factor(id))) + geom_jitter(aes(color=factor(timenum))) + theme(legend.position = "none") + ggtitle("Cortisol Dot Plot")
```

## Correlation Matrix of relevant variables

```{r}
matrix_vars <- cp_long[c("cortvalue","stimeC","timenumC","painC", "angerC", "fearC", "happinessC", "sadnessC", "gender","ctqsumC")]

matrix_vars <- data.matrix(matrix_vars)

matrix1 <- cor(matrix_vars, use = "complete.obs")

col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))

corrplot(matrix1, method = "color", col = col(200),
         type = "upper", order = "hclust", number.cex = .7,
         addCoef.col = "black", # Add coefficient of correlation
         tl.col = "black", tl.srt = 90, # Text label color and rotation
         # Combine with significance
         #sig.level = 0.05, insig = "blank", 
         # hide correlation coefficient on the principal diagonal (or not)
         diag = TRUE, title = "Correlation Matrix", mar=c(0,0,3,0))
```

# Aim 2a

# Using lmer() with the lme4 package

https://ourcodingclub.github.io/2017/03/15/mixed-models.html

1. Check distribution of explanatory variable(s).
2. Standardize explanatory variable(s).
3. Make basic lm() model.
4. Check assumptions for the basic lm() model.
5. Run more analyses if assumptions have been violated.
6. Modify the basic lm() model.
7. Fit your first lmer() model.
8. Check assumptions for the first lmer() model.
9. [Do something re: crossed vs. nested effects, but I don't think this applies here.]
10. Make it all look pretty in tables and graphs.

## Testing out the big model with lm()

```{r}
original <- lm(cortvalue~stime+stime^2+gender+painC+painC*stime+painC*stime*stime^2, data=cp_long)
summary(original)
#This says that everything is significant: time, gender, pain, and interaction between time and pain except the Intercept.

original2 <- lm(cortvalue~stimeC+stimeC^2+gender+painC+painC*stimeC+painC*stimeC*stimeC^2, data=cp_long)
summary(original2)
#Okay, now pain isn't significant, huh. And now the intercept is significant. This is probably the correct model.

original3 <- lm(cortvalue~stimeC+stimeC^2+gender+angerC+angerC*stimeC+angerC*stimeC*stimeC^2, data=cp_long)
summary(original3)

original4 <- lm(cortvalue~stimeC+stimeC^2+gender+fearC+fearC*stimeC+fearC*stimeC*stimeC^2, data=cp_long)
summary(original4)

original5 <- lm(cortvalue~stimeC+stimeC^2+gender+happinessC+happinessC*stimeC+happinessC*stimeC*stimeC^2, data=cp_long)
summary(original5)

original6 <- lm(cortvalue~stimeC+stimeC^2+gender+sadnessC+sadnessC*stimeC+sadnessC*stimeC*stimeC^2, data=cp_long)
summary(original6) #sadnessC is very slightly significant!
```

## Checking distributions

```{r}
hist(cp_long$cortvalue, main = "Uncentered cortvalue Histogram")
hist(cp_long$stimeC, main = "Centered stime Histogram")
hist(cp_long$painC, main = "Centered pain Histogram")
hist(cp_long$angerC, main = "Centered anger Histogram")
hist(cp_long$fearC, main = "Centered fear Histogram")
hist(cp_long$happinessC, main = "Centered happiness Histogram")
hist(cp_long$sadnessC, main = "Centered sadness Histogram")
```

## Basic lm() models

```{r}
basic1 <- lm(cortvalue ~ stimeC, data = cp_long)
summary(basic1) #Intercept and stimeC are significant

basic2 <- lm(cortvalue ~ gender, data = cp_long)
summary(basic2) #Intercept and gender are significant

basic3 <- lm(cortvalue ~ ctqsumC, data = cp_long)
summary(basic3) #Intercept and CTQ are significant

basic4 <- lm(cortvalue ~ painC, data = cp_long)
summary(basic4) #Intercept is significant but painC is not

basic5 <- lm(cortvalue ~ angerC, data = cp_long)
summary(basic5) #Intercept is significant but angerC is not

basic6 <- lm(cortvalue ~ fearC, data = cp_long)
summary(basic6) #Intercept is significant but fearC is not

basic7 <- lm(cortvalue ~ happinessC, data = cp_long)
summary(basic7) #Intercept is significant but happinessC is not

basic8 <- lm(cortvalue ~ sadnessC, data = cp_long)
summary(basic8) #Intercept is significant but sadnessC is not
```

## Checking assumptions

```{r}
plot(basic1, which = 1) #Linearity
plot(basic1, which = 2) #Normality
plot(basic1, which = 3) #Equality of variance
plot(basic1, which = 4) #Leverage / Identifies outliers

plot(basic1)
plot(basic2)
plot(basic3)
plot(basic4)
plot(basic5)
plot(basic6)
plot(basic7)
plot(basic8)
```

## Modified lm() models

```{r}
modified1 <- lm(cortvalue ~ stimeC + gender, data = cp_long)
summary(modified1) #All are significant
plot(modified1)

modified2 <- lm(cortvalue ~ stimeC + painC, data = cp_long)
summary(modified2) #Only Intercept and stimeC are significant
plot(modified2)

modified3 <- lm(cortvalue ~ stimeC + painC + gender, data = cp_long)
summary(modified3) #Intercept, stimeC, and gender are significant
plot(modified3)

modified4 <- lm(cortvalue ~ stimeC + ctqsumC + gender, data = cp_long)
summary(modified4) #All are significant
plot(modified4)

#modified5 <- lm(cortvalue ~ timenumC + ctqsumC + gender, data = cp_long)
#summary(modified5) #All are significant
#plot(modified5)

modified3.1 <- lm(cortvalue ~ stimeC + angerC + gender, data = cp_long)
summary(modified3.1) #Intercept, stimeC, and gender are significant
plot(modified3.1)

modified3.2 <- lm(cortvalue ~ stimeC + fearC + gender, data = cp_long)
summary(modified3.2) #Intercept, stimeC, and gender are significant
plot(modified3.2)

modified3.3 <- lm(cortvalue ~ stimeC + happinessC + gender, data = cp_long)
summary(modified3.3) #Intercept, stimeC, and gender are significant
plot(modified3.3)

modified3.4 <- lm(cortvalue ~ stimeC + sadnessC + gender, data = cp_long)
summary(modified3.4) #Intercept, stimeC, and gender are significant - AND ALMOST SADNESS - but not quite here
plot(modified3.4)
```

## lmer() model

```{r}
#mixed.lmer <- lmer(testScore ~ bodyLength2 + (1|mountainRange), data = dragons)
#summary(mixed.lmer)
#mountainRange is the random effect, bodyLength2 is fixed
#See that fun little 1? That's the intercept!

#Mixed effects models are supposed to have categorical variables... (and gender doesn't count here!)

#Models that use stimeC

lmer1.1 <- lmer(cortvalue ~ painC + (1|stimeC), data = cp_long)
summary(lmer1.1)

lmer1.2 <- lmer(cortvalue ~ angerC + (1|stimeC), data = cp_long)
summary(lmer1.2)

lmer1.3 <- lmer(cortvalue ~ fearC + (1|stimeC), data = cp_long)
summary(lmer1.3)

lmer1.4 <- lmer(cortvalue ~ happinessC + (1|stimeC), data = cp_long)
summary(lmer1.4)

lmer1.5 <- lmer(cortvalue ~ sadnessC + (1|stimeC), data = cp_long)
summary(lmer1.5)

lmer2 <- lmer(cortvalue ~ gender + (1|stimeC), data = cp_long)
summary(lmer2)

lmer3 <- lmer(cortvalue ~ ctqsumC + (1|stimeC), data = cp_long)
summary(lmer3)

lmer4 <- lmer(cortvalue ~ painC + gender + ctqsumC + (1|stimeC), data = cp_long)
summary(lmer4)


#Models that use timenumC

lmertimenum1 <- lmer(cortvalue ~ painC + (1|timenumC), data = cp_long)
summary(lmertimenum1)

lmertimenum2 <- lmer(cortvalue ~ gender + (1|timenumC), data = cp_long)
summary(lmertimenum2)

lmertimenum3 <- lmer(cortvalue ~ ctqsumC + (1|timenumC), data = cp_long)
summary(lmertimenum3)

lmer4 <- lmer(cortvalue ~ painC + gender + ctqsumC + (1|timenumC), data = cp_long)
summary(lmertimenum4)
```

Let's see if either of those lmer() models worked. Probably not.

```{r}
#Add titles?
plot(lmer1)
plot(lmer2)
plot(lmer3)
plot(lmer4)

plot(lmer5)
plot(lmer6)
plot(lmer7)
plot(lmer8)
```

```{r}
qqnorm(resid(lmer1)) + qqline(resid(lmer1))
qqnorm(resid(lmer2)) + qqline(resid(lmer2))
qqnorm(resid(lmer3)) + qqline(resid(lmer3))
qqnorm(resid(lmer4)) + qqline(resid(lmer4))
#Gives warning but plots anyway
```

For "lmer4"...

stimeC variance: 0.04193
Residual variance: 1.02347
Total variance: 0.04193 + 1.02347 = 1.0654
Variance explained by stimeC = 0.04193/1.0654 = 0.03936
Cool... so stimeC explains 3% of the variance in lmer4. 

Same thing if timenumC replaces stimeC (2.8%).

I am still unsure whether I should stimeC or timenumC. 

# Using lme() with the nlme package

```{r}
#The default is method="REML" anyway
lme1.1 <- lme(cortvalue ~ painC,
            data = cp_long,
            random=~1|stimeC,
            method="REML")
summary(lme1.1)


lme1.2 <- lme(cortvalue ~ angerC,
            data = cp_long,
            random=~1|stimeC,
            method="REML")
summary(lme1.2)

lme1.3 <- lme(cortvalue ~ fearC,
            data = cp_long,
            random=~1|stimeC,
            method="REML")
summary(lme1.3)

lme1.4 <- lme(cortvalue ~ happinessC,
            data = cp_long,
            random=~1|stimeC,
            method="REML")
summary(lme1.4)

lme1.5 <- lme(cortvalue ~ sadnessC,
            data = cp_long,
            random=~1|stimeC,
            method="REML")
summary(lme1.5)

lme2 <- lme(cortvalue ~ gender,
            data = cp_long,
            random=~1|stimeC,
            method="REML")
summary(lme2)

lme3 <- lme(cortvalue ~ ctqsumC,
            data = cp_long,
            random=~1|stimeC,
            method="REML")
summary(lme3)

lme4.1 <- lme(cortvalue ~ painC + gender + ctqsumC,
            data = cp_long,
            random=~1|stimeC,
            method="REML")
summary(lme4.1)

lme4.2 <- lme(cortvalue ~ angerC + gender + ctqsumC,
            data = cp_long,
            random=~1|stimeC,
            method="REML")
summary(lme4.2)

lme4.3 <- lme(cortvalue ~ fearC + gender + ctqsumC,
            data = cp_long,
            random=~1|stimeC,
            method="REML")
summary(lme4.3)

lme4.4 <- lme(cortvalue ~ happinessC + gender + ctqsumC,
            data = cp_long,
            random=~1|stimeC,
            method="REML")
summary(lme4.4)

lme4.5 <- lme(cortvalue ~ sadnessC + gender + ctqsumC,
            data = cp_long,
            random=~1|stimeC,
            method="REML")
summary(lme4.5)

badidea1 <- lme(cortvalue ~ painC + angerC + fearC + happinessC + sadnessC,
               data = cp_long,
               random=~1|stimeC,
               method="REML")
summary(badidea1)
```

## lme() plots

```{r}
plot(lme1)
plot(lme2)
plot(lme3)
plot(lme4)
```

```{r}
qqnorm(resid(lme1)) + qqline(resid(lme1))
qqnorm(resid(lme2)) + qqline(resid(lme2))
qqnorm(resid(lme3)) + qqline(resid(lme3))
qqnorm(resid(lme4)) + qqline(resid(lme4))
#Gives warning but plots anyway
```

# Side by side comparison of lme() and lmer()

```{r}
summary(lmer4)
summary(lme4)

coef(summary(lmer4))
coef(summary(lme4))

#They look basically the same, the only difference is that lmer() doesn't provide p-values as designed by the package-maker
```

## Moderation with lme() WORK IN PROGRESS!!!!

```{r}
lmemod2 <- lme(cortvalue ~ painC + ctqsumC + gender + painC*ctqsumC, 
              data=cp_long,
              random=~1|stimeC)
summary(lmemod2)
```

```{r}
lmemod3 <- lme(cortvalue ~ painC + ctqsumC + painC*ctqsumC, 
              data=cp_long,
              random=~1|stimeC)
summary(lmemod3)
```

```{r}
lmemod4 <- lme(cortvalue ~ painC + ctqsumC + gender*ctqsumC, 
              data=cp_long,
              random=~1|stimeC)
summary(lmemod4)
```


## From "Growth Curve Analysis and Visualization Using R"

https://www.taylorfrancis.com/books/9781466584334

### Chapter 2

### Anger

```{r}
anger.base <- lmer(cortvalue ~ 1 + stime + (1 + stime|id), data=cp_long, REML=FALSE)
anger.0 <- lmer(cortvalue ~ 1 + stime + angerC + (1 + stime|id), data=cp_long, REML=FALSE)
anger.1 <- lmer(cortvalue ~ 1 + stime + angerC + gender + (1 + stime|id), data=cp_long, REML=FALSE)
anger.2 <- lmer(cortvalue ~ 1 + stime + angerC + gender + ctqsumC + (1 + stime|id), data=cp_long, REML=FALSE)
anger.3 <- lmer(cortvalue ~ 1 + stime + angerC + gender + ctqsumC + angerC*gender*ctqsumC +  (1 + stime|id), data=cp_long, REML=FALSE)

summary(anger.base)
summary(anger.0)
summary(anger.1)
summary(anger.2)
summary(anger.3)

anova(anger.base,anger.0,anger.1,anger.2,anger.3)
```

### Fear

```{r}
fear.base <- lmer(cortvalue ~ 1 + stime + (1 + stime|id), data=cp_long, REML=FALSE)
fear.0 <- lmer(cortvalue ~ 1 + stime + fearC + (1 + stime|id), data=cp_long, REML=FALSE)
fear.1 <- lmer(cortvalue ~ 1 + stime + fearC + gender + (1 + stime|id), data=cp_long, REML=FALSE)
fear.2 <- lmer(cortvalue ~ 1 + stime + fearC + gender + ctqsumC + (1 + stime|id), data=cp_long, REML=FALSE)
fear.3 <- lmer(cortvalue ~ 1 + stime + fearC + gender + ctqsumC + fearC*gender*ctqsumC +  (1 + stime|id), data=cp_long, REML=FALSE)

summary(fear.base)
summary(fear.0)
summary(fear.1)
summary(fear.2)
summary(fear.3)

anova(fear.base,fear.0,fear.1,fear.2,fear.3)
```

### Happiness

```{r}
happy.base <- lmer(cortvalue ~ 1 + stime + (1 + stime|id), data=cp_long, REML=FALSE)
happy.0 <- lmer(cortvalue ~ 1 + stime + happinessC + (1 + stime|id), data=cp_long, REML=FALSE)
happy.1 <- lmer(cortvalue ~ 1 + stime + happinessC + gender + (1 + stime|id), data=cp_long, REML=FALSE)
happy.2 <- lmer(cortvalue ~ 1 + stime + happinessC + gender + ctqsumC + (1 + stime|id), data=cp_long, REML=FALSE)
happy.3 <- lmer(cortvalue ~ 1 + stime + happinessC + gender + ctqsumC + happinessC*gender*ctqsumC +  (1 + stime|id), data=cp_long, REML=FALSE)

summary(happy.base)
summary(happy.0)
summary(happy.1)
summary(happy.2)
summary(happy.3)

anova(happy.base,happy.0,happy.1,happy.2,happy.3)
```

### Sadness

```{r}
sad.base <- lmer(cortvalue ~ 1 + stime + (1 + stime|id), data=cp_long, REML=FALSE)
sad.0 <- lmer(cortvalue ~ 1 + stime + sadnessC + (1 + stime|id), data=cp_long, REML=FALSE)
sad.1 <- lmer(cortvalue ~ 1 + stime + sadnessC + gender + (1 + stime|id), data=cp_long, REML=FALSE)
sad.2 <- lmer(cortvalue ~ 1 + stime + sadnessC + gender + ctqsumC + (1 + stime|id), data=cp_long, REML=FALSE)
sad.3 <- lmer(cortvalue ~ 1 + stime + sadnessC + gender + ctqsumC + sadnessC*gender*ctqsumC +  (1 + stime|id), data=cp_long, REML=FALSE)

summary(sad.base)
summary(sad.0)
summary(sad.1)
summary(sad.2)
summary(sad.3)

anova(sad.base,sad.0,sad.1,sad.2,sad.3)
```

#### Basic plots

```{r}
ggplot(data=cp_long, aes(angerC, cortvalue, color=gender)) + stat_summary(fun.data=mean_se, geom="pointrange")

#ggplot(cp_long, aes(cortvalue, angerC, color=gender)) + stat_summary(fun.data=mean_se, geom="pointrange") + stat_summary(aes(y=fitted(anger.2), linetype=gender), fun.y=mean, geom="line")
```

```{r}
ggplot(data=cp_long, aes(fearC, cortvalue, color=gender)) + stat_summary(fun.data=mean_se, geom="pointrange") 
```

```{r}
ggplot(data=cp_long, aes(happinessC, cortvalue, color=gender)) + stat_summary(fun.data=mean_se, geom="pointrange") 
```

```{r}
ggplot(data=cp_long, aes(sadnessC, cortvalue, color=gender)) + stat_summary(fun.data=mean_se, geom="pointrange") 
```

### Chapter 3

```{r}
cp_long$timenumCn <- as.numeric(cp_long$timenumC)
cp_long$gender <- as.factor(cp_long$gender)

ggplot(cp_long, aes(timenumC, cortvalue, shape=gender)) +
stat_summary(fun.y=mean, geom="line", size=1) +
stat_summary(fun.data=mean_se, geom="pointrange", size=1) 

t <- poly(unique(cp_long$timenumCn), 2)
cp_long[,paste("ot", 1:2, sep="")] <- t[cp_long$timenumCn, 1:2]

#WARNING: I don't know if this is appropriate or not considering that timenumC is a factor/bin/whatever and not a proper numeric time variablike like stime
```

```{r}
sad.base <- lmer(cortvalue ~ (ot1+ot2) + (ot1+ot2|id), data=cp_long, REML=FALSE)
sad.0 <- lmer(cortvalue ~ (ot1+ot2) + sadnessC + (ot1+ot2|id), data=cp_long, REML=FALSE) #intercept
sad.1 <- lmer(cortvalue ~ (ot1+ot2) + sadnessC + ot1:sadnessC + (ot1+ot2|id), data=cp_long, REML=FALSE) #linear
sad.2 <- lmer(cortvalue ~ (ot1+ot2)*sadnessC + (ot1+ot2|id), data=cp_long, REML=FALSE) #quadratic

summary(sad.base)
summary(sad.0)
summary(sad.1)
summary(sad.2)

anova(sad.base,sad.0,sad.1,sad.2)

#does this mean I don't need to use the second order of time to predict sadnessC? 
```

### Anger

```{r}
anger.base <- lmer(cortvalue ~ (ot1+ot2) + (ot1+ot2|id), data=cp_long, REML=FALSE)
anger.0 <- lmer(cortvalue ~ (ot1+ot2) + angerC + (ot1+ot2|id), data=cp_long, REML=FALSE) #intercept
anger.1 <- lmer(cortvalue ~ (ot1+ot2) + angerC + ot1:angerC + (ot1+ot2|id), data=cp_long, REML=FALSE) #linear
anger.2 <- lmer(cortvalue ~ (ot1+ot2)*angerC + (ot1+ot2|id), data=cp_long, REML=FALSE) #quadratic

summary(anger.base)
summary(anger.0)
summary(anger.1)
summary(anger.2)

anova(anger.base,anger.0,anger.1,anger.2)
```

### Fear

```{r}
fear.base <- lmer(cortvalue ~ (ot1+ot2) + (ot1+ot2|id), data=cp_long, REML=FALSE)
fear.0 <- lmer(cortvalue ~ (ot1+ot2) + fearC + (ot1+ot2|id), data=cp_long, REML=FALSE) #intercept
fear.1 <- lmer(cortvalue ~ (ot1+ot2) + fearC + ot1:fearC + (ot1+ot2|id), data=cp_long, REML=FALSE) #linear
fear.2 <- lmer(cortvalue ~ (ot1+ot2)*fearC + (ot1+ot2|id), data=cp_long, REML=FALSE) #quadratic

summary(fear.base)
summary(fear.0)
summary(fear.1)
summary(fear.2)

anova(fear.base,fear.0,fear.1,fear.2)
```

### Happiness

```{r}
happy.base <- lmer(cortvalue ~ (ot1+ot2) + (ot1+ot2|id), data=cp_long, REML=FALSE)
happy.0 <- lmer(cortvalue ~ (ot1+ot2) + happinessC + (ot1+ot2|id), data=cp_long, REML=FALSE) #intercept
happy.1 <- lmer(cortvalue ~ (ot1+ot2) + happinessC + ot1:happinessC + (ot1+ot2|id), data=cp_long, REML=FALSE) #linear
happy.2 <- lmer(cortvalue ~ (ot1+ot2)*happinessC + (ot1+ot2|id), data=cp_long, REML=FALSE) #quadratic

summary(happy.base)
summary(happy.0)
summary(happy.1)
summary(happy.2)

anova(happy.base,happy.0,happy.1,happy.2)
```

### Sadness

```{r}
sad.base <- lmer(cortvalue ~ (ot1+ot2) + (ot1+ot2|id), data=cp_long, REML=FALSE)
sad.0 <- lmer(cortvalue ~ (ot1+ot2) + sadnessC + (ot1+ot2|id), data=cp_long, REML=FALSE) #intercept
sad.1 <- lmer(cortvalue ~ (ot1+ot2) + sadnessC + ot1:sadnessC + (ot1+ot2|id), data=cp_long, REML=FALSE) #linear
sad.2 <- lmer(cortvalue ~ (ot1+ot2)*sadnessC + (ot1+ot2|id), data=cp_long, REML=FALSE) #quadratic

summary(sad.base)
summary(sad.0)
summary(sad.1)
summary(sad.2)

anova(sad.base,sad.0,sad.1,sad.2)

#So I think we don't need a second order polynominal for stime to adequately predict sadnessC, which is pretty much the same for all emotions for both Chapters 2 and 3. 
```

### Pain

```{r}
pain.base <- lmer(cortvalue ~ (ot1+ot2) + (ot1+ot2|id), data=cp_long, REML=FALSE)
pain.0 <- lmer(cortvalue ~ (ot1+ot2) + painC + (ot1+ot2|id), data=cp_long, REML=FALSE) #intercept
pain.1 <- lmer(cortvalue ~ (ot1+ot2) + painC + ot1:painC + (ot1+ot2|id), data=cp_long, REML=FALSE) #linear
pain.2 <- lmer(cortvalue ~ (ot1+ot2)*painC + (ot1+ot2|id), data=cp_long, REML=FALSE) #quadratic

summary(pain.base)
summary(pain.0)
summary(pain.1)
summary(pain.2)

anova(pain.base,pain.0,pain.1,pain.2)
```

## Gender Testing

```{r}
summary(gender1 <- lm(angerC ~ gender, cp_long)) #sig
summary(gender2 <- lm(fearC ~ gender, cp_long)) #sig
summary(gender2 <- lm(happinessC ~ gender, cp_long)) #sig
summary(gender2 <- lm(sadnessC ~ gender, cp_long)) #NOT SIG!
```

OKAY. Something is up with gender and sadness but I have no idea what it is.

## Writing out the new cp_long

```{r}
#write.csv(cp_long, file="/Users/Julianna/Desktop/data/cp_long_aim2a.csv")
write.csv(cp_long, file="C:/Users/jrcala/Documents/My Research/RStudio/cp_long_aim2a.csv")
```
